<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<zk>
	<!-- if need to set to columns popup -->
	<script type="text/javascript">
	<![CDATA[
		zk.afterLoad('zul.mesh', function () {
			var _sortWidget = {};
			zk.override(zul.mesh.SortWidget.prototype, _sortWidget, {
					_doMenuClick: function (evt) {
						if (this.parent._menupopup && this.parent._menupopup != 'none') {
							var pp = this.parent._menupopup,
								n = this.$n(),
								btn = this.$n('btn'),
								zcls = this.getZclass();
								
							jq(n).addClass(zcls + "-visi");
							
							if (pp == 'auto' && this.parent._mpop)
								pp = this.parent._mpop;
							else
								pp = this.$f(this.parent._menupopup);
				
							if (zul.wgt.Popup.isInstance(pp)) {
								var ofs = zk(btn).revisedOffset(),
									asc = this.getSortAscending() != 'none',
									desc = this.getSortDescending() != 'none',
									mw = this.getMeshWidget();
								if (pp.$instanceof(zul.mesh.ColumnMenupopup)) {
									pp.getAscitem().setVisible(asc);
									pp.getDescitem().setVisible(desc);
									var model = mw.getModel();
									if (zk.feature.pe && pp.getGroupitem()) {
										if (model == 'group' || !model || this.isListen('onGroup', {asapOnly: 1}))
											pp.getGroupitem().setVisible((asc || desc));
										else
											pp.getGroupitem().setVisible(false);
									}
									if (zk.feature.ee && pp.getUngroupitem()) {
										var visible = !model || this.isListen('onUngroup', {asapOnly: 1});
										pp.getUngroupitem().setVisible(visible && mw.hasGroup());
									}
									
									var sep = pp.getDescitem().nextSibling;
									if (sep) 
										sep.setVisible((asc || desc));
								} else {
									pp.listen({onOpen: [this.parent, this.parent._onMenuPopup]});
								}
								pp.open(btn, [ofs[0], ofs[1] + btn.offsetHeight - 4], null, {sendOnOpen: true});
							}
							evt.stop(); // avoid onSort event.
						}
					}
			});
		});
	]]></script>
	<window apply="org.zkoss.bind.BindComposer"
		viewModel="@id('vm')@init('test.MyViewModel')">
		<div style="color: red; margin-bottom: 20px;">
			Drag and drop column to change grid's column order and column visibility
		</div>
		<columnchooser id="columnchooser" visibleColumns="@init(vm.visibleColumns)" hiddenColumns="@init(vm.hiddenColumns)" onColumnVisibilityChange="@command('doColumnVisibilityChange', visibleColumns=event.visibleColumns, hiddenColumns=event.hiddenColumns)"></columnchooser>
		<button label="Open Column chooser" onClick="@command('openColumnchooser', ref=self)">
		</button>
		<div>
			POC
		</div>
		<grid model="@load(vm.beans)" height="500px">
			<columns children="@load(vm.visibleColumns)">
				<template name="children">
					<column label="@load(each)"></column>
				</template>
			</columns>
			<template name="model" var="bean" >
				<row children="@init(vm.visibleColumns) @template(vm.getColumnType(each))">
					<template name="label" var="column">
						<label value="@load(bean[column])"></label>
					</template>
					<template name="button" var="column">
						<button label="@load(bean[column])" onClick="@command('doClick', cell=bean[column])"></button>
					</template>
					<template name="checkbox" var="column">
						<checkbox label="@load(bean[column])" onCheck="@command('doCheck', cell=bean[column])"></checkbox>
					</template>
				</row>
			</template>
		</grid>
	</window>
</zk>